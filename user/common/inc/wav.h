#ifndef __WAV_H
#define __WAV_H
/* Includes ------------------------------------------------------------------*/
#include "stdint.h"

/*******************************************************
http://www.cnitblog.com/tinnal/archive/2009/01/03/53401.html
------------------------------------------------
|             RIFF WAVE Chunk                  |
|             ID  = 'RIFF'                     |
|             RiffType = 'WAVE'                |
------------------------------------------------
|             Format Chunk                     |
|             ID = 'fmt '                      |
------------------------------------------------
|             Fact Chunk(optional)             |
|             ID = 'fact'                      |
------------------------------------------------
|             Data Chunk                       |
|             ID = 'data'                      |
-----------------------------------------------
RIFF WAVE Chunk
    ==================================
    |       |所占字节数|  具体内容   |
    ==================================
    | ID    |  4 Bytes |   'RIFF'    |
    ----------------------------------
    | Size  |  4 Bytes |             |
    ----------------------------------
    | Type  |  4 Bytes |   'WAVE'    |
    ----------------------------------
            图2  RIFF WAVE Chunk
    以'FIFF'作为标示，然后紧跟着为size字段，该size是整个wav文件大小减去ID和Size所占用的字节数，即FileLen - 8 = Size。然后是Type字段，为'WAVE'，表示是wav文件。
Format Chunk
    ====================================================================
    |               |   字节数  |              具体内容                |
    ====================================================================
    | ID            |  4 Bytes  |   'fmt '                             |
    --------------------------------------------------------------------
    | Size          |  4 Bytes  | 数值为16或18，18则最后又附加信息     |
    --------------------------------------------------------------------  ----
    | FormatTag     |  2 Bytes  | 编码方式，一般为0x0001               |     |
    --------------------------------------------------------------------     |
    | Channels      |  2 Bytes  | 声道数目，1--单声道；2--双声道       |     |
    --------------------------------------------------------------------     |
    | SamplesPerSec |  4 Bytes  | 采样频率                             |     |
    --------------------------------------------------------------------     |
    | AvgBytesPerSec|  4 Bytes  | 每秒所需字节数                       |     |===> WAVE_FORMAT
    --------------------------------------------------------------------     |
    | BlockAlign    |  2 Bytes  | 数据块对齐单位(每个采样需要的字节数) |     |
    --------------------------------------------------------------------     |
    | BitsPerSample |  2 Bytes  | 每个采样需要的bit数                  |     |
    --------------------------------------------------------------------     |
    |               |  2 Bytes  | 附加信息（可选，通过Size来判断有无） |     |
    --------------------------------------------------------------------  ----
                            图3  Format Chunk
    以'fmt '作为标示。一般情况下Size为16，此时最后附加信息没有；如果为18，则最后多了2个字节的附加信息。主要由一些软件制成的wav格式中含有该2个字节的附加信息。
Fact Chunk
    ==================================
    |       |所占字节数|  具体内容   |
    ==================================
    | ID    |  4 Bytes |   'fact'    |
    ----------------------------------
    | Size  |  4 Bytes |   数值=4   |
    ----------------------------------
    | data  |  4 Bytes | 为转换器前的data数据长度|
    ----------------------------------
            图4  Fact Chunk
    Fact Chunk是可选字段，一般当wav文件由某些软件转化而成，则包含该Chunk。
Data Chunk
    ==================================
    |       |所占字节数|  具体内容   |
    ==================================
    | ID    |  4 Bytes |   'data'    |
    ----------------------------------
    | Size  |  4 Bytes |             |
    ----------------------------------
    | data  |          |             |
    ----------------------------------
             图5 Data Chunk
    Data Chunk是真正保存wav数据的地方，以'data'作为该Chunk的标示。然后是数据的大小。紧接着就是wav数据。根据Format Chunk中的声道数以及采样bit数，wav数据的bit位置可以分成以下几种形式：
    ---------------------------------------------------------------------
    |   单声道  |    取样1    |    取样2    |    取样3    |    取样4    |
    |           |--------------------------------------------------------
    |  8bit量化 |    声道0    |    声道0    |    声道0    |    声道0    |
    ---------------------------------------------------------------------
    |   双声道  |          取样1            |           取样2           |
    |           |--------------------------------------------------------
    |  8bit量化 |  声道0(左)  |  声道1(右)  |  声道0(左)  |  声道1(右)  |
    ---------------------------------------------------------------------
    |           |          取样1            |           取样2           |
    |   单声道  |--------------------------------------------------------
    | 16bit量化 |    声道0    |  声道0      |    声道0    |  声道0      |
    |           | (低位字节)  | (高位字节)  | (低位字节)  | (高位字节)  |
    ---------------------------------------------------------------------
    |           |                         取样1                         |
    |   双声道  |--------------------------------------------------------
    | 16bit量化 |  声道0(左)  |  声道0(左)  |  声道1(右)  |  声道1(右)  |
    |           | (低位字节)  | (高位字节)  | (低位字节)  | (高位字节)  |
    ---------------------------------------------------------------------
                         图6 wav数据bit位置安排方式

*********************************************************/

#pragma pack(1)
//--------------------------
struct RIFF_HEADER
{
	uint8_t		szRiffID[4];  // 'R','I','F','F'
	uint32_t		dwRiffSize;
	uint8_t		szRiffFormat[4]; // 'W','A','V','E'
};
//--------------------------
struct WAVE_FORMAT
{
	uint16_t		wFormatTag;  //格式类型:一般为1即线性PCM编码,还有其他如g711码,alaw等
	uint16_t		wChannels;  //声道：单声道为1，双声道为2,Mono = 1, Stereo = 2, etc.
	uint32_t		dwSamplesPerSec; //采样频率
	uint32_t		dwAvgBytesPerSec; //数据传输速率（每秒平均字节数）=wChannels*dwSamplesPerSec*wBitsPerSample
	uint16_t		wBlockAlign; //数据块的调整数（按字节）= NumChannels * BitsPerSample/8
	uint16_t		wBitsPerSample; //每样本的数据位数, 8bits, 16bits, etc.
//	uint16_t		pack;		//附加信息（可选，通过Size来判断有无）
};
struct FMT_BLOCK
{
	uint8_t		szFmtID[4]; // 'f','m','t',' '
	uint32_t		dwFmtSize;//数值为16或18，18则最后有附加信息
	struct	WAVE_FORMAT wavFormat; //如dwFmtSize=18则多2个字节
};
//--------可选------------------
struct FACT_BLOCK
{
	uint8_t		szFactID[4]; // 'f','a','c','t'
	uint32_t		dwFactSize; //子块大小
  uint32_t		dwFactData; //子块数据
};
//--------------------------
struct DATA_BLOCK
{
	uint8_t		szDataID[4]; // 'd','a','t','a'
	uint32_t	dwDataSize;
};

uint32_t Wav_info(void);
void Wav_Play(uint8_t deep);
#endif
/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/